# ðŸ“¦ schemas.py â€” Pydantic models (entrÃ©es/sorties API)

from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime

# âœ… RequÃªte d'inscription
class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str

# âœ… RÃ©ponse utilisateur
class UserOut(BaseModel):
    id: int
    username: str
    email: EmailStr
    role: str

    class Config:
        orm_mode = True

# âœ… Token de rÃ©ponse
class Token(BaseModel):
    access_token: str
    token_type: str

# âœ… DonnÃ©es d'entrÃ©e pour une interaction
class InteractionCreate(BaseModel):
    question: str
    final_answer: str
    confiance: Optional[float] = None
    clarte: Optional[float] = None
    empathie: Optional[float] = None
    assertivite: Optional[float] = None


# âœ… RÃ©ponse complÃ¨te pour une interaction
class InteractionOut(BaseModel):
    id: int
    user_id: int
    question: str
    final_answer: str
    confiance: Optional[float]
    clarte: Optional[float]
    empathie: Optional[float]
    assertivite: Optional[float]
    created_at: datetime

    class Config:
        orm_mode = True
