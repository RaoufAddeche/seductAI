from fastapi import APIRouter, Depends, Query, HTTPException
from sqlalchemy.orm import Session
from api.auth.dependencies import get_current_user, get_db
from model.db.models import Interaction, User
from api.models.schemas import InteractionCreate

router = APIRouter()


# ğŸ“Œ POST : CrÃ©e une nouvelle interaction liÃ©e Ã  l'utilisateur connectÃ©
@router.post("/interactions")
def create_interaction(
    interaction: InteractionCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    new_interaction = Interaction(
        **interaction.dict(),
        user_id=current_user.id
    )
    db.add(new_interaction)
    db.commit()
    db.refresh(new_interaction)
    print("[DEBUG] Nouvelle interaction enregistrÃ©e :", new_interaction.__dict__)
    return new_interaction


# ğŸ“Œ GET : Liste les interactions avec pagination
@router.get("/interactions")
def get_interactions(
    limit: int = Query(10, description="Nombre dâ€™Ã©lÃ©ments par page"),
    offset: int = Query(0, description="DÃ©calage"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return db.query(Interaction)\
             .filter(Interaction.user_id == current_user.id)\
             .order_by(Interaction.created_at.desc())\
             .offset(offset)\
             .limit(limit)\
             .all()


# ğŸ“Œ GET : Nombre total dâ€™interactions (utile pour la pagination front)
@router.get("/interactions/count")
def get_interaction_count(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    total = db.query(Interaction)\
              .filter(Interaction.user_id == current_user.id)\
              .count()
    return {"total": total}


# ğŸ“Œ GET : DerniÃ¨re interaction enregistrÃ©e
@router.get("/interactions/latest")
def get_latest_interaction(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    latest = (
        db.query(Interaction)
        .filter(Interaction.user_id == current_user.id)
        .order_by(Interaction.created_at.desc())
        .first()
    )

    if not latest:
        return {"message": "Aucune interaction trouvÃ©e", "scores": None}

    return {
        "message": "DerniÃ¨re interaction rÃ©cupÃ©rÃ©e âœ…",
        "scores": {
            "confiance": latest.confiance,
            "clartÃ©": latest.clarte,
            "empathie": latest.empathie,
            "assertivitÃ©": latest.assertivite
        }
    }
